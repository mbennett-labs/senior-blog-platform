# Generated by Django 5.2.3 on 2025-06-15 03:05

import ckeditor_uploader.fields
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_title', models.CharField(default='My Blog', help_text="Your blog's main title", max_length=100)),
                ('tagline', models.CharField(default='Thoughts on social justice, community, and faith', help_text='Brief description of your blog', max_length=200)),
                ('about_text', models.TextField(help_text='About section text for your blog')),
                ('contact_email', models.EmailField(help_text='Contact email displayed on your blog', max_length=254)),
            ],
            options={
                'verbose_name': 'Blog Settings',
                'verbose_name_plural': 'Blog Settings',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Category name (e.g., 'Social Justice', 'Community')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version (auto-generated)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Brief description of this category')),
                ('color', models.CharField(default='#3498db', help_text='Category color for visual organization', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpeakingEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Contact person's name", max_length=100)),
                ('email', models.EmailField(help_text='Contact email', max_length=254)),
                ('organization', models.CharField(blank=True, help_text='Organization name', max_length=200)),
                ('inquiry_type', models.CharField(choices=[('speaking', 'üé§ Speaking Engagement'), ('interview', 'üì∫ Interview/Podcast'), ('workshop', 'üë• Workshop/Training'), ('consultation', 'üí¨ Consultation'), ('writing', '‚úçÔ∏è Writing/Guest Post')], max_length=20)),
                ('status', models.CharField(choices=[('new', 'üì© New Inquiry'), ('contacted', 'üìû Initial Contact Made'), ('discussing', 'üí¨ In Discussion'), ('scheduled', 'üìÖ Scheduled'), ('completed', '‚úÖ Completed'), ('declined', '‚ùå Declined')], default='new', max_length=20)),
                ('event_date', models.DateField(blank=True, help_text='Proposed event date', null=True)),
                ('fee_offered', models.DecimalField(blank=True, decimal_places=2, help_text='Speaking fee offered (if any)', max_digits=10, null=True)),
                ('message', models.TextField(help_text='Original inquiry message')),
                ('notes', models.TextField(blank=True, help_text='Your follow-up notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Clear, engaging title for your post', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly version (auto-generated)', max_length=200, unique_for_date='publish')),
                ('summary', models.TextField(help_text='Brief summary (2-3 sentences) for previews and social media', max_length=300)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Your main article content. Use the toolbar for formatting, images, and links.')),
                ('featured_image', models.ImageField(blank=True, help_text='Optional: Upload a main image for your post', null=True, upload_to='blog/featured/')),
                ('status', models.CharField(choices=[('draft', 'üìù Draft - Not published yet'), ('published', '‚úÖ Published - Live on website'), ('featured', '‚≠ê Featured - Highlighted on homepage')], default='draft', max_length=10)),
                ('publish', models.DateTimeField(default=django.utils.timezone.now, help_text='When to publish this post (can be set for future)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_description', models.CharField(blank=True, help_text='Optional: Description for Google search results (160 characters max)', max_length=160)),
                ('allow_comments', models.BooleanField(default=True, help_text='Allow readers to comment on this post')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='Choose a category for organization', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.category')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags separated by commas (e.g., social-justice, community, faith)', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-publish'],
            },
        ),
    ]
